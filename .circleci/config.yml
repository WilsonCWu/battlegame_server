version: 2

jobs:
  build-and-test:
    working_directory: ~/battlegame_server
    docker:
      - image: circleci/python:3.6.4
        environment:
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      - image: circleci/postgres:9.6.2
        environment:
          POSTGRES_USER: u_battlegame
          POSTGRES_DB: battlegame
    steps:
      - checkout
      - run:
          name: "Grand CI permissions"
          command: |
            sudo chown -R circleci:circleci /usr/local/bin
      - restore_cache:
          key: deps9-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: "Pip install dependencies"
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: deps9-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: "Set up .env"
          command: |
            echo -e "SECRET_KEY=foo\nPOSTGRES_PASSWORD=postgres\nDEVELOPMENT=on" >> .env
      - run:
          name: "No pending migrations"
          command: |
            . venv/bin/activate
            python manage.py makemigrations --check --dry-run
      - run:
          name: "Run migrations and service"
          command: |
            . venv/bin/activate
            python manage.py migrate
            python manage.py runserver
          background: true
      - run:
          name: "Unit tests"
          command: |
            . venv/bin/activate
            python manage.py test
      - run:
          name: "Ping service"
          # NOTE(yanke): CI failures may happen here if migrations and starting
          # the server takes longer than the unit tests. May need to add sleep
          # or retry loop.
          command: |
            curl localhost:8000/test
  deploy-prod:
    docker:
      - image: circleci/python:3.6.4
    steps:
      - checkout
      - run: ssh -oStrictHostKeyChecking=no -v circleci@salutationstudio.com "./deploy.sh"

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-and-test
      # Optionally we can have a manual approval step in the future. For now
      # let it auto deploy on push to master.
      # - hold:
      #     type: approval
      #     requires:
      #       - build-and-test
      - deploy-prod:
          requires:
            - build-and-test
          filters:
            branches:
              only: master
